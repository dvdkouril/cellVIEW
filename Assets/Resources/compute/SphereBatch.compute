#include "../Helper.cginc"

#pragma kernel ProteinFillBatchBuffer

#define MAX_SPHERE_COUNT_PER_BATCH 4096

uniform	float _Scale;
uniform int _EnableLod;
uniform	int _NumLevels;
uniform	int _NumInstances;
uniform float4 _CameraForward;
uniform float4 _CameraPosition;

uniform	int _CullFlagFilter;
uniform int _EnableCrossSection;
uniform float4 _CrossSectionPlane;
uniform float4 _FrustrumPlanes[6]; 

uniform	StructuredBuffer<int> _ProteinAtomCount;
uniform	StructuredBuffer<int> _ProteinAtomStart;
uniform	StructuredBuffer<float4> _ProteinClusterCount;
uniform	StructuredBuffer<float4> _ProteinClusterStart;

uniform	StructuredBuffer<int> _ProteinVisibilityFlag;
uniform StructuredBuffer<int> _ProteinInstanceCullFlags;
	
uniform StructuredBuffer<float4> _LodLevelsInfos;	
uniform	StructuredBuffer<float4> _ProteinInstanceInfo;
uniform	StructuredBuffer<float4> _ProteinInstancePositions;	
uniform AppendStructuredBuffer<int4> _ProteinSphereBatchInfos;

[numthreads(1,1,1)]
void ProteinFillBatchBuffer (uint3 id : SV_DispatchThreadID)
{
	if(id.x >= (uint)_NumInstances) return;
			
	float4 infos = _ProteinInstanceInfo[id.x];
	float4 sphere = _ProteinInstancePositions[id.x] * _Scale;
		
	int cullFlag = _ProteinInstanceCullFlags[id.x];
	bool frustrumTest = SphereFrustrumTest(_FrustrumPlanes, sphere);
	bool crossSectionTest = _EnableCrossSection && SpherePlaneTest(_CrossSectionPlane, float4(sphere.xyz, 0));
		
	// if instance is culled return
	if(_CullFlagFilter == -1 && cullFlag == 0) return;	
	if(_CullFlagFilter != -1 && cullFlag != _CullFlagFilter) return;
	if(frustrumTest || crossSectionTest || _ProteinVisibilityFlag[infos.x] == 0) return;
				
	float cameraDistance = dot(sphere.xyz - _CameraPosition.xyz, _CameraForward.xyz);

	int lodLevel = 0;				
	for(int i = 0; i < _NumLevels; i++) { lodLevel = (cameraDistance < _LodLevelsInfos[i].x) ? lodLevel : i+1; }	

	lodLevel = _EnableLod == 0 ? 0 : lodLevel;
	int clusterLevel = max(lodLevel - 1, 0);	
	int sphereIndex = (lodLevel == 0) ? _ProteinAtomStart[infos.x] : _ProteinClusterStart[infos.x][clusterLevel];
	int sphereCount = (lodLevel == 0) ? _ProteinAtomCount[infos.x] : _ProteinClusterCount[infos.x][clusterLevel];
	
	int numBatches = ceil((float)sphereCount / (float)MAX_SPHERE_COUNT_PER_BATCH);	
	int sphereCountPerBatch = ceil(float(sphereCount) / float(numBatches));

	int batchIndex = 0;
	int batchCount = sphereCountPerBatch;		

	for(int j = 0; j < numBatches; j++)
	{
		batchCount = min(batchIndex + sphereCountPerBatch, sphereCount) - batchIndex;			
		_ProteinSphereBatchInfos.Append(int4(id.x, lodLevel, batchCount, sphereIndex + batchIndex));
		batchIndex += batchCount;
	}		
}

#pragma kernel LipidFillBatchBuffer

uniform	int _NumPatches;
uniform StructuredBuffer<int> _LipidPatchCullFlags;
uniform	StructuredBuffer<float4> _LipidPatchInfos;
uniform	StructuredBuffer<float4> _LipidPatchPositions;	
uniform AppendStructuredBuffer<int4> _LipidSphereBatches;

[numthreads(1,1,1)]
void LipidFillBatchBuffer (uint3 id : SV_DispatchThreadID)
{
	//if(id.x >= (uint)_NumPatches) return;
			
	float4 infos = _LipidPatchInfos[id.x];
	float4 sphere = _LipidPatchPositions[id.x] * _Scale;
		
	int cullFlag = _LipidPatchCullFlags[id.x];
	bool frustrumTest = SphereFrustrumTest(_FrustrumPlanes, sphere);
	bool crossSectionTest = _EnableCrossSection && SpherePlaneTest(_CrossSectionPlane, float4(sphere.xyz, -sphere.w));
		
	// if instance is culled return	
	if(frustrumTest || crossSectionTest) return;
	if(_CullFlagFilter == -1 && cullFlag == 0) return;	
	if(_CullFlagFilter != -1 && cullFlag != _CullFlagFilter) return;
				
	_LipidSphereBatches.Append(int4(id.x, 0, infos.xy));	
}